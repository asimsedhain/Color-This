{"version":3,"sources":["components/UploadBox.js","components/DisplayImage.js","App.js","serviceWorker.js","index.js"],"names":["UploadBox","props","uploadImage","e","alert","preventDefault","Card","className","CardHeader","tag","CardBody","id","action","method","encType","onSubmit","this","type","name","placeholder","required","onChange","handleImageChange","value","inputValue","onClick","Component","DisplayImage","imageState","Fragment","Col","src","imageId","alt","width","height","color","renderImage","App","a","data","FormData","append","state","selectedFile","fetch","body","response","json","loadImageInterval","setInterval","loadImage","setState","status","clearInterval","target","files","Navbar","NavbarText","Container","Row","sm","md","lg","fluid","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVAoCeA,E,YA/Bd,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,YAAc,SAACC,GACdC,MAAM,SACND,EAAEE,kBAPgB,E,sEAalB,OAAQ,kBAACC,EAAA,EAAD,CAAMC,UAAU,QACvB,kBAACC,EAAA,EAAD,CAAYC,IAAI,KAAKF,UAAU,eAA/B,oBAEA,kBAACG,EAAA,EAAD,KACC,0BAAMH,UAAU,cAAcI,GAAG,OAAOC,OAAO,UAAUC,OAAO,OAAOC,QAAQ,uBAC9E,yBAAKP,UAAU,aAAaQ,SAAUC,KAAKf,MAAMC,aAChD,2BAAOe,KAAK,OAAON,GAAG,QAAQJ,UAAU,gBAAgBW,KAAK,WAAWC,YAAY,eAAeC,UAAQ,EAAEC,SAAUL,KAAKf,MAAMqB,kBAAmBC,MAAOP,KAAKf,MAAMuB,cAExK,4BAAQjB,UAAU,2CAA2CgB,MAAM,SAASZ,GAAG,QAC9EM,KAAK,SAASQ,QAAST,KAAKf,MAAMC,aADnC,iB,GAtBmBwB,a,iBCwCTC,E,YAtCd,WAAY1B,GAAQ,qEACbA,I,2EAGN,OAA8B,IAA1Be,KAAKf,MAAM2B,WACN,kBAAC,IAAMC,SAAP,KACP,kBAACC,EAAA,EAAD,CAAKvB,UAAU,8HACd,yBAAKA,UAAU,sDACd,wBAAIA,UAAU,8BAAd,kBACA,kBAACG,EAAA,EAAD,KACC,yBAAKqB,IAAG,mDAA8Cf,KAAKf,MAAM+B,SAAWC,IAAI,GAAGC,MAAM,MAAMC,OAAO,UAKxG,yBAAK5B,UAAU,sDACd,wBAAIA,UAAU,8BAAd,iBACA,kBAACG,EAAA,EAAD,cAAgB,yBAAKqB,IAAG,gDAA2Cf,KAAKf,MAAM+B,SAAWC,IAAI,GAAGC,MAAM,MAAMC,OAAO,YAOlF,IAA1BnB,KAAKf,MAAM2B,WACb,yBAAKrB,UAAU,WAAU,yBAAKA,UAAU,oCAAf,kCAAsF,kBAAC,IAAD,CAAcU,KAAM,QAASmB,MAAO,OAAQD,OAAQ,MAAOD,MAAO,MAAO3B,UAAU,aAElM,kBAAC,IAAMsB,SAAP,Q,+BAKT,OAAOb,KAAKqB,kB,GAjCaX,aCqFZY,E,YArFd,WAAYrC,GAAQ,IAAD,8BAClB,4CAAMA,KAYPC,YAbmB,uCAaL,WAAOC,GAAP,mBAAAoC,EAAA,6DACbpC,EAAEE,kBACImC,EAAO,IAAIC,UACZC,OAAO,WAAY,EAAKC,MAAMC,cAHtB,SAIUC,MAAM,+BAAgC,CAC5DhC,OAAQ,OACRiC,KAAMN,IANM,cAIPO,EAJO,gBAQUA,EAASC,OARnB,OAQPhB,EARO,OAQ2BA,QACxC,EAAKiB,kBAAoBC,YAAY,EAAKC,UAAW,KACrD,EAAKC,SAAS,CACbR,aAAc,KACdpB,WAAY,GACZI,WAAY,EACZI,QAASA,IAdG,4CAbK,wDA+BnBmB,UA/BmB,sBA+BP,sBAAAZ,EAAA,sEACYM,MAAM,yCAAD,OAA0C,EAAKF,MAAMX,UADtE,OAGY,KAHZ,OAGEqB,SACZ,EAAKD,SAAS,CAAExB,WAAY,IAC5B0B,cAAc,EAAKL,oBALT,2CA/BO,EAwCnB3B,kBAAoB,SAACnB,GACpB,EAAKiD,SAAS,CACbR,aAAczC,EAAEoD,OAAOC,MAAM,GAC7BhC,WAAYrB,EAAEoD,OAAOhC,SAzCtB,EAAKoB,MAAQ,CACZC,aAAc,KACdpB,WAAY,GACZI,WAAY,EACZI,QAAS,MAIV,EAAKiB,kBAAoB,KAVP,E,sEAgDlB,OACC,yBAAK1C,UAAU,OACd,kBAACkD,EAAA,EAAD,CAAQlD,UAAU,WACjB,kBAACmD,EAAA,EAAD,CAAYnD,UAAU,mEAAkE,4CAGzF,kBAACoD,EAAA,EAAD,CAAWpD,UAAU,QACpB,kBAACqD,EAAA,EAAD,KACC,kBAAC9B,EAAA,EAAD,CAAK+B,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIxD,UAAU,WACnC,kBAAC,EAAD,CAAWL,YAAac,KAAKd,YAAaoB,kBAAmBN,KAAKM,kBAAmBE,WAAYR,KAAK2B,MAAMnB,eAG9G,kBAACoC,EAAA,EAAD,KACC,kBAAC,EAAD,CAAchC,WAAYZ,KAAK2B,MAAMf,WAAYI,QAAShB,KAAK2B,MAAMX,YAGvE,kBAAC2B,EAAA,EAAD,CAAWK,OAAO,EAAMzD,UAAU,gBACjC,kBAACoD,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAAC9B,EAAA,EAAD,KACC,6BAAK,wBAAIvB,UAAU,kBAAd,iBACL,6BAAK,wBAAIA,UAAU,oCAAd,qCACL,yBAAKA,UAAU,yCAAf,oHACA,yBAAKA,UAAU,oCAAf,iFAKJ,gCACC,yBAAK0D,MAAM,6BAAX,sC,GA9EavC,aCQEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c4339de0.chunk.js","sourcesContent":["import React from \"react\";\nimport { Component } from 'react';\nimport { Card, CardBody, CardHeader } from \"reactstrap\";\n\nclass UploadBox extends Component {\n\tconstructor(props) {\n\t\t\tsuper(props);\n\t}\n\t\n\n\tuploadImage = (e) => {\n\t\talert(\"Hello\");\n\t\te.preventDefault();\n\n\n\t}\n\n\trender() {\n\t\treturn (<Card className=\"my-5\">\n\t\t\t<CardHeader tag=\"h5\" className=\"text-center\">Image Submission</CardHeader>\n\n\t\t\t<CardBody>\n\t\t\t\t<form className=\"form-signin\" id=\"form\" action=\"/upload\" method=\"POST\" encType=\"multipart/form-data\" >\n\t\t\t\t\t<div className=\"form-group\" onSubmit={this.props.uploadImage}>\n\t\t\t\t\t\t<input type=\"file\" id=\"Image\" className=\"form-control \" name=\"Original\" placeholder=\"Submit Image\" required  onChange={this.props.handleImageChange} value={this.props.inputValue}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button className=\"btn btn-primary btn-block text-uppercase\" value=\"Submit\" id=\"login\"\n\t\t\t\t\t\ttype=\"submit\" onClick={this.props.uploadImage}>Submit</button>\n\t\t\t\t</form>\n\t\t\t</CardBody>\n\t\t</Card>)\n\n\t}\n\n}\n\nexport default UploadBox;\n","import React from \"react\";\nimport { Component } from 'react';\nimport { Col, Card, CardBody, CardHeader } from \"reactstrap\";\nimport ReactLoading from 'react-loading';\n\nclass DisplayImage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\trenderImage() {\n\t\tif (this.props.imageState === 2) {\n\t\t\treturn (<React.Fragment>\n\t\t\t\t<Col className=\"d-flex justify-content-xl-center justify-content-lg-center justify-content-md-between justify-content-sm-between flex-wrap\" >\n\t\t\t\t\t<div className=\"mx-auto mx-md-auto mx-sm-auto mx-lg-5 mx-xl-5 my-2\">\n\t\t\t\t\t\t<h5 className=\"text-center text-secondary\">Original Image</h5>\n\t\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t\t<img src={`http://localhost:5000/upload/original?id=${this.props.imageId}`} alt=\"\" width=\"256\" height=\"256\" />\n\t\t\t\t\t\t</CardBody>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"mx-auto mx-sm-auto mx-md-auto mx-lg-5 mx-xl-5 my-2\">\n\t\t\t\t\t\t<h5 className=\"text-center text-secondary\">Colored Image</h5>\n\t\t\t\t\t\t<CardBody>\t\t\t\t\t\t<img src={`http://localhost:5000/upload/color?id=${this.props.imageId}`} alt=\"\" width=\"256\" height=\"256\" />\n\t\t\t\t\t\t</CardBody>\n\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\n\t\t\t</React.Fragment >)\n\t\t} else if (this.props.imageState === 1) {\n\t\t\treturn (<div className=\"mx-auto\"><div className=\"text-uppercase font-weight-light\">coloring at the speed of light</div><ReactLoading type={\"balls\"} color={\"#000\"} height={'30%'} width={'30%'} className=\"mx-auto\" /></div>)\n\t\t} else {\n\t\t\treturn (<React.Fragment></React.Fragment>)\n\t\t}\n\t}\n\n\trender() {\n\t\treturn this.renderImage();\n\n\t}\n\n}\n\nexport default DisplayImage;\n","import React, { Component } from 'react';\nimport { Container, Row, Col, Jumbotron, Navbar, NavbarText } from \"reactstrap\";\nimport UploadBox from \"./components/UploadBox\"\nimport DisplayImage from \"./components/DisplayImage\"\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselectedFile: null,\n\t\t\tinputValue: \"\",\n\t\t\timageState: 0,\n\t\t\timageId: null\n\t\t\t// imageState: 1,\n\t\t\t// imageId: '5eb4d443fd0fc31ac0215cc4'\n\t\t}\n\t\tthis.loadImageInterval = null;\n\t}\n\n\tuploadImage = async (e) => {\n\t\te.preventDefault();\n\t\tconst data = new FormData()\n\t\tdata.append('Original', this.state.selectedFile)\n\t\tconst response = await fetch('http://localhost:5000/upload', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data\n\t\t});\n\t\tconst imageId = (await response.json()).imageId;\n\t\tthis.loadImageInterval = setInterval(this.loadImage, 1000);\n\t\tthis.setState({\n\t\t\tselectedFile: null,\n\t\t\tinputValue: \"\",\n\t\t\timageState: 1,\n\t\t\timageId: imageId\n\t\t})\n\t}\n\n\tloadImage = async () => {\n\t\tconst response = await fetch(`http://localhost:5000/upload/color?id=${this.state.imageId}`)\n\n\t\tif (response.status == 200) {\n\t\t\tthis.setState({ imageState: 2 })\n\t\t\tclearInterval(this.loadImageInterval);\n\t\t}\n\t}\n\n\thandleImageChange = (e) => {\n\t\tthis.setState({\n\t\t\tselectedFile: e.target.files[0],\n\t\t\tinputValue: e.target.value\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navbar className=\"bg-dark\">\n\t\t\t\t\t<NavbarText className=\"text-light mx-auto navbar-brand text-uppercase font-weight-bold\"><h1>Color This</h1></NavbarText>\n\t\t\t\t</Navbar>\n\n\t\t\t\t<Container className=\"my-5\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col sm=\"9\" md=\"7\" lg=\"5\" className=\"mx-auto\">\n\t\t\t\t\t\t\t<UploadBox uploadImage={this.uploadImage} handleImageChange={this.handleImageChange} inputValue={this.state.inputValue} />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<DisplayImage imageState={this.state.imageState} imageId={this.state.imageId} />\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t\t<Container fluid={true} className=\"bg-light p-4\">\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t<Row >\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<div><h2 className=\"text-secondary\">How it works</h2></div>\n\t\t\t\t\t\t\t\t<div><h3 className=\"font-weight-light text-secondary\">Colorization Using Deep Learning</h3></div>\n\t\t\t\t\t\t\t\t<div className=\"text-secondary mt-3 font-weight-light\">Submit your images and using our deep learning state of the art model, we will provide a realistic colorization.</div>\n\t\t\t\t\t\t\t\t<div className=\"text-secondary font-weight-light\">Make your old pictures come back to life with the power of deep learning.</div>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Container>\n\t\t\t\t</Container>\n\t\t\t\t<footer>\n\t\t\t\t\t<div class=\"container text-center p-4\">Copyright &copy; Ashim Sedhain\n\t\t\t\t\t</div>\n\t\t\t\t</footer>\n\t\t\t</div >\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}