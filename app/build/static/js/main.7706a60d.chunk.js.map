{"version":3,"sources":["components/UploadBox.js","components/DisplayImage.js","components/DisplayText.js","text.js","App.js","serviceWorker.js","index.js"],"names":["UploadBox","props","Row","Col","sm","md","lg","className","Card","style","borderRadius","CardHeader","tag","CardBody","CardText","id","action","method","encType","onSubmit","uploadImage","type","name","placeholder","required","onChange","handleImageChange","value","inputValue","onClick","exampleImages","map","image","key","src","alt","selected","filter","handleExampleImageClick","bind","DisplayImage","imageState","Fragment","originalURL","width","height","colorURL","color","DisplayText","points","getStyle","bg","text","Container","fluid","sty","content","heading","subheading","index","point","how_it_works","our_model","limitation","future_plans","webport","App","e","a","preventDefault","state","selectedFile","setState","data","FormData","append","fetch","body","response","json","imageId","loadImageInterval","setInterval","loadImage","colorResponse","status","originalResponse","URL","blob","createObjectURL","clearInterval","target","files","Navbar","NavbarText","this","backgroundColor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7706a60d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col, Card, CardBody, CardHeader, CardText } from \"reactstrap\";\n\nfunction UploadBox(props) {\n\n\treturn (\n\n\t\t<Row>\n\t\t\t<Col sm=\"9\" md=\"7\" lg=\"5\" className=\"mx-auto\">\n\t\t\t\t<Card className=\"my-3\" style={{ borderRadius: 0 }}>\n\t\t\t\t\t<CardHeader tag=\"h5\" className=\"text-center bg-light text-dark\">Colorize Your Image</CardHeader>\n\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t<CardText tag=\"h5\" className=\"text-secondary\">Submit Your Image</CardText>\n\t\t\t\t\t\t<form className=\"form-signin\" id=\"form\" action=\"/upload\" method=\"POST\" encType=\"multipart/form-data\" >\n\t\t\t\t\t\t\t<div className=\"form-group\" onSubmit={props.uploadImage}>\n\t\t\t\t\t\t\t\t<input type=\"file\" id=\"Image\" className=\"form-control\" style={{ borderRadius: 0 }} name=\"Original\" placeholder=\"Submit Image\" required onChange={props.handleImageChange} value={props.inputValue} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button className=\"btn yellow btn-block text-uppercase text-light\" value=\"Submit\" id=\"login\"\n\t\t\t\t\t\t\t\ttype=\"submit\" onClick={props.uploadImage} style={{ borderRadius: 0 }}>Submit</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<div className=\"mt-3\">\n\n\t\t\t\t\t\t\t<CardText tag=\"h5\" className=\"text-secondary\">Or, Try a Sample Image</CardText>\n\n\t\t\t\t\t\t\t<div className=\"d-flex\" style={{ borderRadius: 0 }}>\n\t\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t\t{props.exampleImages.map((image)=>\n\t\t\t\t\t\t\t\t\t\t<Col key={image.id}>\n\t\t\t\t\t\t\t\t\t\t<img src={image.src}  alt=\"Sample\" style={image.selected? {borderRadius:0}:{filter: \"grayscale(100%)\", borderRadius:0}} className=\"img-thumbnail\" onClick={props.handleExampleImageClick.bind(this, image.id)} ></img>\n\t\t\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</CardBody>\n\t\t\t\t</Card>\n\t\t\t</Col>\n\t\t</Row>\n\t)\n\n}\n\n\nexport default UploadBox;\n","import React from \"react\";\nimport { Col, CardBody, Row  } from \"reactstrap\";\nimport ReactLoading from 'react-loading';\n\nfunction DisplayImage(props) {\n\n\tlet renderImage = ()=>{\n\tif (props.imageState === 2) {\n\t\treturn (<React.Fragment>\n\t\t\t<Col className=\"d-flex justify-content-xl-center justify-content-lg-center justify-content-md-between justify-content-sm-between flex-wrap\" >\n\t\t\t\t<div className=\"mx-auto mx-md-auto mx-sm-auto mx-lg-5 mx-xl-5 my-2\">\n\t\t\t\t\t<h5 className=\"text-center text-secondary\">Original Image</h5>\n\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t<img src={props.originalURL} alt=\"\" width=\"256\" height=\"256\" />\n\t\t\t\t\t</CardBody>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"mx-auto mx-sm-auto mx-md-auto mx-lg-5 mx-xl-5 my-2\">\n\t\t\t\t\t<h5 className=\"text-center text-secondary\">Colored Image</h5>\n\t\t\t\t\t<CardBody>\n\t\t\t\t\t\t<img src={props.colorURL} alt=\"\" width=\"256\" height=\"256\" />\n\t\t\t\t\t</CardBody>\n\n\t\t\t\t</div>\n\t\t\t</Col>\n\n\t\t</React.Fragment >)\n\t} else if (props.imageState === 1) {\n\t\treturn (<div className=\"mx-auto\"><div className=\"text-uppercase font-weight-light\">coloring at the speed of light</div><ReactLoading type=\"balls\" color={\"#ffab00\"} height={'30%'} width={'30%'} className=\"mx-auto\" /></div>)\n\t} else {\n\t\treturn (<React.Fragment></React.Fragment>)\n\t}\n\n}\n\treturn (\n\t\t<Row>\n\t\t\t{renderImage()}\n\t\t</Row>\n\t)\n}\n\nexport default DisplayImage;\n","import React from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nfunction DisplayText(props) {\r\n\r\n\tlet getStyle = (style) => {\r\n\t\t\r\n\t\tswitch (style) {\r\n\t\t\tcase \"light\":\r\n\t\t\t\treturn { bg: \"bg-light\", text: \"text-secondary\" }\r\n\t\t\tcase \"dark\":\r\n\t\t\t\treturn { bg: \"bg-dark\", text: \"text-light\" }\r\n\t\t\tcase \"secondary\":\r\n\t\t\t\treturn { bg: \"bg-secondary\", text: \"text-light\" }\r\n\t\t\tcase \"yellow\":\r\n\t\t\t\treturn { bg: \"yellow\", text: \"text-light\" }\r\n\t\t\tcase \"green\":\r\n\t\t\t\treturn { bg: \"green\", text: \"text-light\" }\r\n\t\t\tdefault:\r\n\t\t\t\treturn { bg: \"bg-white\", text: \"text-secondary\" }\r\n\t\t}\r\n\t}\r\n\r\n\tlet renderPoints = (points) => {\r\n\t\tif (points) {\r\n\t\t\treturn (<ul className={\"mt-2\"}>{points.map((point, index) => <li key={index} className={`font-weight-light  ${getStyle(props.sty).text}`}>{point}</li>)}</ul>)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (<React.Fragment />)\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\r\n\t\t<Container fluid={true} className={`${getStyle(props.sty).bg} py-5`}>\r\n\t\t\t<Container>\r\n\t\t\t\t<Row >\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<div><h2 className={`${getStyle(props.sty).text}`}>{props.content.heading}</h2></div>\r\n\t\t\t\t\t\t<div><h3 className={`font-weight-light ${getStyle(props.sty).text}`}>{props.content.subheading}</h3></div>\r\n\t\t\t\t\t\t{props.content.text.map((text, index) => <div key={index} className={`font-weight-light  ${getStyle(props.sty).text}`}>{text}</div>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t{renderPoints(props.content.points)}\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t</Container>\r\n\r\n\t)\r\n}\r\n\r\nexport default DisplayText\r\n\r\n\r\n\r\n\r\n","\r\nconst how_it_works = {\r\n\theading: \"How it works\",\r\n\tsubheading: \"Colorization Using Deep Learning\",\r\n\ttext: [\"Submit your image below and using our deep learning state of the art model, we will produce a realistic colorization.\",\r\n\t\t\"Make your old pictures come back to life with the power of deep learning.\"]\r\n}\r\nconst our_model = {\r\n\theading: \"Our Model\",\r\n\tsubheading: \"Deep Generative Adversarial Network\",\r\n\ttext: [\"Our model is based on the paper by Richard Zhang. It has been trained on one million images from the ImageNet dataset running on sixteen Nvidia 1080 ti.\",\r\n\t\t\"You can learn more about the training process over here.\"]\r\n}\r\nconst limitation = {\r\n\theading: \"Current Limitation\",\r\n\tsubheading: \"Deep Learning is Hard\",\r\n\ttext: [\"Due to constraints on resources, we are not able to deliver the best possible results.\", \"The following is a list of limitation of our current model.\t\"],\r\n\tpoints: [\"256 X 256 image size.\", \"Only 1:1 ratio supported. Crop/edit before hand for improved performance.\",\"Discolored skin.\", \"No user interaction.\"]\r\n}\r\n\r\nconst future_plans = {\r\n\theading: \"Planned Features\",\r\n\tsubheading: \"The Future Man!\",\r\n\ttext:[\"It might seem doom and gloom, friends. But worry not our slaves *ahem ahem* I mean, our engineers are working hard to bring the best experience.\", \"The following is a list of features planned to released soon.\"], \r\n\tpoints: [\"Increased image resolution.\", \"User Interaction.\", \"Support for videos.\", \"Variable Image ratios.\"]\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport { how_it_works, limitation, future_plans, our_model };","import React, { Component } from 'react';\r\nimport { Container, Navbar, NavbarText } from \"reactstrap\";\r\nimport UploadBox from \"./components/UploadBox\";\r\nimport DisplayImage from \"./components/DisplayImage\";\r\nimport DisplayText from \"./components/DisplayText\";\r\nimport { how_it_works, our_model, limitation, future_plans } from \"./text\";\r\nimport \"./style/colors.css\"\r\nconst webport = \"http://color-this.eastus.cloudapp.azure.com/upload\"\r\n// const webport = \"http://localhost/upload\"\r\n\r\n\r\nclass App extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\r\n\t\tthis.state = {\r\n\t\t\tselectedFile: null,\r\n\t\t\tinputValue: \"\",\r\n\t\t\timageState: 0,\r\n\t\t\timageId: null,\r\n\t\t\tcolorURL: null,\r\n\t\t\toriginalURL: null,\r\n\t\t\texampleImages: [{ id: \"5ec14ad608db08b724a2b4e0\", src: \" ../sample_image_0.jpg\", selected: false }, { id: \"5ec14be608db082acaa2b4e1\", src: \" ../sample_image_1.jpg\", selected: false }, { id: \"5ec14c1608db080a3ca2b4e3\", src: \" ../sample_image_2.jpg\", selected: false }]\r\n\t\t}\r\n\r\n\t\r\n\t\tthis.loadImageInterval = null;\r\n\t}\r\n\r\n\t// Function uploads the image from the form\r\n\tuploadImage = async (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tif (this.state.selectedFile) {\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tinputValue: \"\",\r\n\t\t\t\timageState: 1,\r\n\t\t\t\texampleImages: this.state.exampleImages.map((image) => ({ ...image, selected: false }))\r\n\t\t\t})\r\n\r\n\t\t\tconst data = new FormData()\r\n\t\t\tdata.append('Original', this.state.selectedFile)\r\n\t\t\tconst response = await fetch(webport, {\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: data\r\n\t\t\t});\r\n\r\n\t\t\tconst imageId = (await response.json()).imageId;\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedFile: null,\r\n\t\t\t\timageId: imageId,\r\n\t\t\t})\r\n\r\n\t\t\t// Sets and interval to call the function loadimage every second to see if the image has been processed.\r\n\t\t\tthis.loadImageInterval = setInterval(this.loadImage, 1000);\r\n\t\t}\r\n\t}\r\n\r\n\t// Function loads the image if it is avaiable\r\n\t// if not it won't do anything\r\n\tloadImage = async () => {\r\n\t\tconst colorResponse = await fetch(`${webport}/color?id=${this.state.imageId}`)\r\n\r\n\t\tif (colorResponse.status === 200) {\r\n\t\t\tconst originalResponse = await fetch(`${webport}/original?id=${this.state.imageId}`)\r\n\t\t\tthis.setState({ imageState: 2, colorURL: URL.createObjectURL(await colorResponse.blob()), originalURL: URL.createObjectURL(await originalResponse.blob()) })\r\n\t\t\tclearInterval(this.loadImageInterval);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// Handler for change in the form data\r\n\thandleImageChange = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tselectedFile: e.target.files[0],\r\n\t\t\tinputValue: e.target.value\r\n\t\t})\r\n\t}\r\n\r\n\t// Handle the event of example image click\r\n\thandleExampleImageClick = (id) => {\r\n\t\tif (id !== this.state.imageId) {\r\n\t\t\tthis.setState({\r\n\t\t\t\timageId: id,\r\n\t\t\t\timageState: 1,\r\n\t\t\t\texampleImages: this.state.exampleImages.map((image) => id === image.id ? { ...image, selected: true } : { ...image, selected: false })\r\n\t\t\t})\r\n\t\t\tclearInterval(this.loadImageInterval)\r\n\t\t\tthis.loadImageInterval = setInterval(this.loadImage, 1000);\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<Navbar className=\"yellow\">\r\n\t\t\t\t\t<NavbarText className=\"text-light mx-auto navbar-brand text-uppercase font-weight-bold\"><h1>Color This</h1></NavbarText>\r\n\t\t\t\t</Navbar>\r\n\r\n\t\t\t\t<DisplayText sty=\"light\" content={how_it_works} />\r\n\t\t\t\t<Container className={\"my-5\"}>\r\n\t\t\t\t\t<UploadBox uploadImage={this.uploadImage} handleImageChange={this.handleImageChange} inputValue={this.state.inputValue} exampleImages={this.state.exampleImages} handleExampleImageClick={this.handleExampleImageClick} />\r\n\t\t\t\t\t<DisplayImage imageState={this.state.imageState} colorURL={this.state.colorURL} originalURL={this.state.originalURL} />\r\n\t\t\t\t</Container>\r\n\t\t\t\t<DisplayText sty=\"yellow\" content={our_model} style={{ backgroundColor: \"#64dd17\" }} />\r\n\t\t\t\t<DisplayText sty=\"white\" content={limitation} />\r\n\t\t\t\t<DisplayText sty=\"light\" content={future_plans} />\r\n\t\t\t\t<footer>\r\n\t\t\t\t\t<div className=\"container-fluid yellow text-center text-light p-4\">Copyright &copy; Ashim Sedhain\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</footer>\r\n\t\t\t</div >\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}