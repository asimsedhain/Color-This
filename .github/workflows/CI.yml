
name: Continious Integration

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Node_CI:
    runs-on: ubuntu-latest
     # Service containers to run with `runner-job`
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
          
    env:
      working-directory: ./app
      DBURI: ${{ secrets.DBURI }}
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
    - uses: actions/checkout@v2 
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install Node packages
      run: npm install
      working-directory: ${{ env.working-directory }}
    - name: Running Unit Tests
      run: npm test
      working-directory: ${{ env.working-directory }}

  Python_CI:
    runs-on: ubuntu-latest
    env:
      working-directory: ./worker
    strategy:
      matrix:
        python-version: [3.6, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install all the dependencies
        run: pip install -r requirements.txt
        working-directory: ${{ env.working-directory }}
      - name: Installing Tensorflow for the CI pipeline seperately
        run: pip install tensorflow==2.2
        working-directory: ${{ env.working-directory }}
      - name: Running Python Unit Test
        run: python -m unittest
        working-directory: ${{ env.working-directory }}